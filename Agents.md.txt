General Prompt for High-Quality, Cross-Platform, Production-Ready Output
Use this prompt to ensure everything produced ‚Äî whether it's code, commands, APIs, CLI tools, documentation, scripts, tests, or infrastructure ‚Äî adheres to enterprise-grade, cross-platform, secure, and fully finished standards.

‚úÖ Mandatory Standards (Non-Negotiable)
You must ensure the following hard requirements are met without exception:

No Stubs, No Placeholders, No Simulations

All logic must be real, fully implemented, and executable as-is

Do not include scaffolding, fake output, or TODO comments

Cross-Platform Compatibility

Must function on:

Windows (legacy included, e.g., PowerShell 5.1)

Linux (Bash ‚â• 3.2)

macOS (bash or zsh)

Use platform-native techniques (e.g., apt, brew, choco, launchctl)

Backwards Compatibility

Must work with runtimes that are at least 3 versions behind the latest

Examples:

PowerShell 5.1

Bash 3.2

Go 1.20

Node 16+

No Runtime Prompts

Outputs must be fully non-interactive by default

Accept interactive mode only with explicit flags like --interactive

Deterministic Behavior

Given the same inputs, outputs must always be the same

No randomness unless explicitly seeded

All Settings Overridable via Flags or Config

CLI flags or config files must take precedence

Must include: --config, --db, --log-path, --mode

Must Include Dry-Run Mode

Any output with side effects must support --dry-run and explain what would happen

No Privilege Escalation Unless Required

Avoid requiring sudo or admin rights

If needed, explain why and document the exact command

All Logs Must Go to Current Working Directory

Path: ./sentinel_cli.log (or clearly defined project-local location)

Logs must be structured, append-only, and UTC-timestamped

All Persistent Data Must Go to a RDBMS

Support SQL Server, PostgreSQL, Oracle, MySQL

No temporary file-based storage unless explicitly allowed

üõ†Ô∏è Technical & Coding Requirements
Applies to any language, tool, or output format:

Structure & Modularity
Code, scripts, or logic must follow Single Responsibility Principle

Max function length: 80 lines

Logic must be reusable and composable

Error Handling
Use structured, informative error messages

Include error context, recovery guidance, and trace ID if applicable

Logging
Use structured JSON or plaintext

Include UTC timestamp (ISO 8601), operation, result, parameters

Rotation policy: 20 MB max size, 5 backups, 30-day retention

Exit Codes
Must follow standard conventions:

0 = success

1 = general failure

127 = command not found

130 = user interruption

Secure Path Handling
Must sanitize and validate input/output paths

Prevent traversal (../) or symlink redirection

Encoding
All data must use UTF-8

Avoid system-dependent encoding defaults

Rate Limiting & Retries
For any network or system call:

Include retry logic

Default to exponential backoff (e.g., 3 attempts, capped timeout)

Linting & Static Analysis
Output must be linted and clean

Bash: shellcheck

PowerShell: PSScriptAnalyzer

Python: pylint

Go: gosec, go vet

Node: eslint

Version Output
All tools, scripts, and APIs must expose a --version or /version endpoint:

text
Copy
Edit
ToolName v1.3.4
Build: 2025-07-06T12:00:00Z
Commit: a1b2c3d
Audit Trail
All impactful operations must be logged in an append-only audit file

Must record:

Who, what, when, where, why

UTC timestamp

Parameters and result

üì¶ Expected CLI/API/UI Behavior
Must accept flags, config files, or environment variables

All output must be usable in automation pipelines

All interfaces must be non-interactive by default

Must support offline, headless, and silent execution