
AI CLI GUI Project ‚Äì Phase Breakdown (Cross-Platform Wails App)
==============================================================

Phase 1: Core App Foundation
----------------------------
- Set up Wails v2 scaffold (Go backend + React frontend)
- Add cross-platform config (`wails.json`)
- Add directory setup logic for logs, config, and state:
  - Windows: %APPDATA%\ai-cli-ui\
  - macOS: ~/Library/Application Support/ai-cli-ui/
  - Linux: ~/.config/ai-cli-ui/
- CLI detection (verify `openai` or `gemini` installed)
- UI layout: prompt field, output window, model selector
- Output: App launches with shell, one-model support, logs CLI call

Phase 2: CLI Session Manager
----------------------------
- On launch, ask user: ‚ÄúHow many concurrent AI CLI instances do you want to allow?‚Äù (1‚Äì5)
- Dynamically manage concurrent CLI execution queues
- Track each session with a UUID and show in UI sidebar
- Allow users to terminate any session safely
- Output: Multiple prompts can be queued or executed in parallel

Phase 3: Stunning UI + Themes
-----------------------------
- Design UI with Tailwind + transitions
- Dark/light theme toggle
- Animated typing effect
- Create modular layout:
  - Side panel for sessions
  - Model selector with glow on change
  - Resource meter (CPU/RAM)
- Responsive resizing for all components
- Output: App looks modern and engaging, theme persists

Phase 4: Model Change Alerts + Logging
--------------------------------------
- Save last-used model per session
- Highlight UI on change: ‚Äú‚ö†Ô∏è Model switched from gpt-4 to gemini-1.5-pro‚Äù
- Write model switch event to `logs.txt`
- Include CLI call + timestamp + prompt
- Output: Users always know what model was used and when it changed

Phase 5: Resource Throttling + Telemetry
----------------------------------------
- Use `gopsutil` to track app memory and CPU usage
- Alert user if over 35% memory or CPU
- Auto-throttle or cancel session if overload persists
- Output: App gracefully handles overloads, logs resource events

Phase 6: History & CLI Logging
------------------------------
- Store every prompt/response pair locally (JSON or SQLite)
- Tag model, session ID, time, success/failure
- Allow browsing and re-asking saved prompts
- Output: Full local history + searchable prompt archive

Phase 7: Direct Billing Links + Session Summary
-----------------------------------------------
- Detect whether CLI is Gemini or OpenAI
- Show ‚Äúüßæ View Billing‚Äù link that opens correct page:
  - OpenAI: https://platform.openai.com/account/billing
  - Gemini: https://makersuite.google.com/app/apikey
- Optional: Show latest usage stats if CLI supports it
- Output: One-click billing transparency

Phase 8: Error Security + UX Polish
-----------------------------------
- Sanitize all user input before calling CLI
- Mask API keys if ever displayed
- Prevent command injection
- Handle all Go subprocess errors gracefully
- Add logging for all failure cases to `logs.txt`
- Output: Production-safe, secure CLI GUI
